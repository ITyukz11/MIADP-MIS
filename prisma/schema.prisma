generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  ADMIN
  USER
  USER_ADMIN
}

model User {
  id                            String                          @id @default(cuid())
  region                        String
  name                          String                          @unique
  unit                          String
  component                     String
  position                      String
  email                         String                          @unique
  color                         String
  active                        Boolean                         @default(true)
  dateSeparated                 String?
  CalendarOfActivityParticipant CalendarOfActivityParticipant[]
  expoPushToken                 String?
  notification                  Notifications?
  wfpActivities                 WFPActivity[]
  calendarOfActivities          CalendarOfActivity[]
  userLog                       UserLog[]
  password                      String
  verificationQuestion          String?
  verificationAnswer            String?
  messages                      Message[]
  doctrackDocuments             DoctrackDocuments[]
  doctrackDocumentIncomingRoute DoctrackDocumentIncomingRoute[]
  subProjectCode                SubProjectCode[]
  subProjectPhoto               SubProjectPhoto[]
  status                        String                          @default("Approved") // Status field to track approval status (e.g., "approved", "disapproved", "pending")
  createdAt                     DateTime                        @default(now()) @map(name: "created_at")
  updatedAt                     DateTime                        @updatedAt @map(name: "updated_at")

  role UserRole @default(USER)

  @@map(name: "users")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    String // Changed from Int to String
  user      User     @relation(fields: [userId], references: [id])
}

model PendingUser {
  id        String   @id @default(cuid())
  region    String
  unit      String
  component String
  position  String
  name      String
  email     String   @unique
  color     String
  password  String
  status    String   @default("Pending") // Status field to track approval status (e.g., "approved", "disapproved", "pending")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "pending_users")
}

model WFPActivity {
  id                      Int                 @id @default(autoincrement())
  activityIdNum           String
  typeOfActivity          String
  operatingUnit           String
  componentsUnits         String
  budgetYear              String
  activities              String
  costTabMajorityActivity String
  costTabSubActivity      String
  unitMeasures            String
  physicalTarget          String
  financialTotal          String
  loanProceed             String
  gopCounterPart          String
  budgetLine              String
  uacsCode                String
  userEmail               String
  user                    User                @relation(fields: [userEmail], references: [email])
  timeFramePhysical       TimeFramePhysical?
  timeFrameFinancial      TimeFrameFinancial?
}

model TimeFramePhysical {
  id            Int         @id @default(autoincrement())
  january       Int
  february      Int
  march         Int
  april         Int
  may           Int
  june          Int
  july          Int
  august        Int
  september     Int
  october       Int
  november      Int
  december      Int
  wfpActivityId Int         @unique
  wfpActivity   WFPActivity @relation(fields: [wfpActivityId], references: [id])
}

model TimeFrameFinancial {
  id            Int         @id @default(autoincrement())
  january       Int
  february      Int
  march         Int
  april         Int
  may           Int
  june          Int
  july          Int
  august        Int
  september     Int
  october       Int
  november      Int
  december      Int
  wfpActivityId Int         @unique
  wfpActivity   WFPActivity @relation(fields: [wfpActivityId], references: [id])
}

model CalendarOfActivity {
  id                           String                          @id @default(cuid())
  authorizeOther               Boolean
  individualActivity           Boolean                         @default(false) // Adding a default value
  WFPYear                      String?
  activityTitle                String
  activityDescription          String
  type                         String
  otherType                    String?
  targetParticipant            String
  participants                 CalendarOfActivityParticipant[]
  location                     String
  dateFrom                     String
  dateTo                       String
  timeStart                    String
  timeEnd                      String
  allDay                       Boolean
  preparatoryList              PreparatoryList[]
  preparatoryContent           String?
  remarks                      String
  color                        String?
  images                       CalendarOfActivitiesImage[]
  attachments                  String?
  status                       String
  qrCode                       String?
  userName                     String
  user                         User                            @relation(fields: [userName], references: [name])
  calendarOfActivityHistory    CalendarOfActivityHistory[]
  calendarOfActivityAttachment CalendarOfActivityAttachments[]
  createdAt                    DateTime                        @default(now()) @map(name: "created_at")
  updatedAt                    DateTime                        @updatedAt @map(name: "updated_at")
}

model CalendarOfActivityParticipant {
  calendarOfActivityId String
  userId               String
  CalendarOfActivity   CalendarOfActivity @relation(fields: [calendarOfActivityId], references: [id])
  User                 User               @relation(fields: [userId], references: [id])

  @@id([calendarOfActivityId, userId])
}

model CalendarOfActivitiesImage {
  id                   String              @id @default(cuid())
  url                  String
  description          String?
  calendarOfActivityId String
  calendarOfActivity   CalendarOfActivity? @relation(fields: [calendarOfActivityId], references: [id])
  createdAt            DateTime            @default(now()) @map(name: "created_at")
  updatedAt            DateTime            @updatedAt @map(name: "updated_at")
}

model PreparatoryList {
  id                 String             @id @default(cuid())
  description        String
  status             String
  remarks            String
  activity           String
  calendarOfActivity CalendarOfActivity @relation(fields: [activity], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model CalendarOfActivityHistory {
  id                 String             @id @default(cuid())
  activity           String
  calendarOfActivity CalendarOfActivity @relation(fields: [activity], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

model Notifications {
  id            String   @id @default(cuid())
  expoPushToken String
  userName      String   @unique // Ensure this field is unique
  user          User     @relation(fields: [userName], references: [name])
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
}

model UserLog {
  id        String   @id @default(cuid())
  userName  String
  user      User     @relation(fields: [userName], references: [name])
  action    String
  remarks   String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model CalendarOfActivityAttachments {
  id                 String             @id @default(cuid())
  details            String
  link               String
  activity           String
  calendarOfActivity CalendarOfActivity @relation(fields: [activity], references: [id])
  createdAt          DateTime           @default(now()) @map(name: "created_at")
}

model DoctrackDocuments {
  id             String                          @id @default(cuid())
  userId         String
  user           User                            @relation(fields: [userId], references: [id])
  subject        String
  description    String
  link           String
  attachment     String
  from           String
  documentType   String
  routeType      String
  date           String
  remarks        String
  encoder        String
  incomingRoutes DoctrackDocumentIncomingRoute[]
  outgoingRoutes DoctrackDocumentOutgoingRoute[]
  createdAt      DateTime                        @default(now()) @map(name: "created_at")
}

model DoctrackDocumentIncomingRoute {
  id                                  String                                @id @default(cuid())
  userId                              String
  user                                User                                  @relation(fields: [userId], references: [id])
  subject                             String
  purpose                             String
  remarks                             String
  documentId                          String
  document                            DoctrackDocuments                     @relation(fields: [documentId], references: [id])
  doctrackDocumentIncomingRouteTo     DoctrackDocumentIncomingRouteTo[] //Receiver
  doctrackDocumentIncomingRouteStatus DoctrackDocumentIncomingRouteStatus[]
  updatedAt                           DateTime                              @updatedAt @map(name: "updated_at")
  createdAt                           DateTime                              @default(now()) @map(name: "created_at")
}

model DoctrackDocumentIncomingRouteTo {
  id                              String                        @id @default(cuid())
  receiver                        String
  sender                          String
  doctrackDocumentIncomingRouteId String
  doctrackDocumentIncomingRoute   DoctrackDocumentIncomingRoute @relation(fields: [doctrackDocumentIncomingRouteId], references: [id])
  createdAt                       DateTime                      @default(now()) @map(name: "created_at")
}

model DoctrackDocumentIncomingRouteStatus {
  id                              String                        @id @default(cuid())
  status                          String
  doctrackDocumentIncomingRouteId String
  doctrackDocumentIncomingRoute   DoctrackDocumentIncomingRoute @relation(fields: [doctrackDocumentIncomingRouteId], references: [id])
  createdAt                       DateTime                      @default(now()) @map(name: "created_at")
}

model DoctrackDocumentOutgoingRoute {
  id         String                                @id @default(cuid())
  documentId String
  particular String
  document   DoctrackDocuments                     @relation(fields: [documentId], references: [id])
  to         DoctrackDocumentOutgoingRouteTo[] //Receiver
  status     DoctrackDocumentOutgoingRouteStatus[]
  remarks    String
  updatedAt  DateTime                              @updatedAt @map(name: "updated_at")
  createdAt  DateTime                              @default(now()) @map(name: "created_at")
}

model DoctrackDocumentOutgoingRouteTo {
  id                              String                        @id @default(cuid())
  receiver                        String
  doctrackDocumentOutgoingRouteId String
  doctrackDocumentOutgoingRoute   DoctrackDocumentOutgoingRoute @relation(fields: [doctrackDocumentOutgoingRouteId], references: [id])
  createdAt                       DateTime                      @default(now()) @map(name: "created_at")
}

model DoctrackDocumentOutgoingRouteStatus {
  id                              String                        @id @default(cuid())
  status                          String
  doctrackDocumentOutgoingRouteId String
  doctrackDocumentOutgoingRoute   DoctrackDocumentOutgoingRoute @relation(fields: [doctrackDocumentOutgoingRouteId], references: [id])
  createdAt                       DateTime                      @default(now()) @map(name: "created_at")
}

model SubProjectCode {
  id                     String            @id @default(cuid())
  briefDescription       String?
  sequentialNum          String
  subprojectTitle        String
  component              String
  sharedFundingWithInfra Boolean?
  region                 String
  province               String
  municipality           String
  ancestralDomainLoc     String
  type                   String
  coordinate             String
  measurement            String?
  physicalIndicator      String?
  tepc                   String
  subProjectPhoto        SubProjectPhoto[] // Corrected type to reference the SubProjectPhoto array
  code                   String            @unique
  userId                 String
  user                   User              @relation(fields: [userId], references: [id])
  updatedAt              DateTime          @updatedAt @map(name: "updated_at")
  createdAt              DateTime          @default(now()) @map(name: "created_at")
}

model SubProjectPhoto {
  id               String         @id @default(cuid())
  fileName         String
  briefDescription String?
  publicId         String         @unique
  format           String
  version          String
  subProjectCodeId String
  subProjectCode   SubProjectCode @relation(fields: [subProjectCodeId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  createdAt        DateTime       @default(now()) @map(name: "created_at")
}

model DeletionRequest {
  id           String   @id @default(cuid())
  email        String
  reason       String
  confirmation Boolean
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
}

model Table8Tracker {
  id              String   @id @default(uuid())
  region          String
  lgu             String
  ancestralDomain String
  commodities     String
  infraEntrep     String
  subproject      String
  typeOfSP        String
  location        String
  validated       Boolean
  conceptNote     Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProcessDocReport {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1. Activity Brief
  activityTitle      String
  WFPActivity        String
  activityObjectives String
  dateConducted      DateTime
  region             String
  province           String
  city               String
  municipality       String
  baranggay          String
  totalMaleIP        Int
  totalFemaleIP      Int
  totalMaleNonIP     Int
  totalFemaleNonIP   Int

  // 2. PRE Activity
  preActivity                  String
  preOtherActivity             String? // optional
  preActivityDescription       String
  preActivityOutputQty         Int
  preActivityOutputDescription String
  preActivityOutcome           String
  preActivityEmergingImpact    String

  // DURING Activity
  during                  String
  duringOtherActivity     String? // optional
  duringDescription       String
  duringOutputQty         Int
  duringOutputDescription String
  duringOutcome           String
  duringEmergingImpact    String

  // POST Activity
  postActivity                  String
  postOtherActivity             String? // optional
  postActivityDescription       String
  postActivityOutputQty         Int
  postActivityOutputDescription String
  postActivityOutcome           String
  postActivityEmergingImpact    String

  // 3. Attachments (store file URLs)
  attendanceSheet       String
  program               String
  photoDocumentation    String
  participantsProfile   String
  presentationMaterials String

  // Signatories
  preparedByName String
  reviewedByName String
  notedByName    String
}

model ApiRateLimit {
  id         String   @id @default(cuid())
  ipAddress  String   @unique
  count      Int      @default(1)
  lastAccess DateTime @default(now())
}
